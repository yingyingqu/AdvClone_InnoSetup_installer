; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

;#define MyAppName "AdvClone-HDD_IBMC"
#define MyAppName "AdvClone-HDD" ;support recovery key
#define MyAppVersion "3.0.1_beta"

#define MyAppPublisher "Advantech"
#define MyAppURL "http://www.advantech.com/"
#define ProgressInfo1 'Please wait while getting the disk information, This may take serveral minutes.'
#define ProgressInfo2 'Please wait while create a new partition and modify the boot sequence, This may take serveral minutes.'
[Setup]
; NOTE: The value of AppId uniquely identifies this application. Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{F1133BA1-8E34-42BF-B0FE-A9617D50ECCB}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={code:GetDefaultDir}\{#MyAppName} 
DisableProgramGroupPage=yes
; Uncomment the following line to run in non administrative install mode (install for current user only.)
;PrivilegesRequired=lowest

;安装包本身的文件版本
VersionInfoVersion=2025.06.26
;安装包版权信息
VersionInfoCopyright={#MyAppPublisher}

OutputBaseFilename={#MyAppName}_{#MyAppVersion}
Compression=lzma
SolidCompression=yes
WizardStyle=modern
;DisableFinishedPage=yes

[Languages]
;Name: "english"; MessagesFile: "compiler:Default.isl"

[Tasks]
;Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked

[Files]
;IBMC About
;Source: "F:\9.3_Win10_AdvClone\AdvClone_QT&Clonezilla_Parts\support_IBMC\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs

;Recvoery button about
Source: "F:\9.3_Win10_AdvClone\AdvClone_QT&Clonezilla_Parts\support_Recovery_Button\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs

Source: "F:\9.3_Win10_AdvClone\AdvClone_Python_Parts\AdvClone_Python_HDD\dist\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "F:\9.3_Win10_AdvClone\VC_redist.x64.exe"; DestDir:  "{app}"

[Run]
Filename: "{app}\VC_redist.x64.exe"; Parameters: "/q"; StatusMsg: "Installing Microsoft Visual C++ Runtime …"; Flags: skipifdoesntexist

;[Messages]
;FinishedLabelNoIcons=Setup has finished installing {#MyAppName} on your computer. You can reboot system to choose backup or restore after boot.

[Code]
var
  StrTemp: String;
  DefaultDir: String;
  OutputProgressWizardPage1,OutputProgressWizardPage2: TOutputProgressWizardPage;
  FinishPage, InfoPage: TWizardPage;
  AfterID: Integer;
function GetDefaultDir(S:String): String;
begin
    DefaultDir := 'C:\Program Files'
    //DefaultDir := 'C:\'
    Log('DefaultDir is: '+DefaultDir);
    Result :=  DefaultDir;
end;

procedure InitializeWizard();
var
  InfoPage:TwizardPage;
begin
  OutputProgressWizardPage1 := CreateOutputProgressPage('Installing', '{#ProgressInfo1}');
  
  OutputProgressWizardPage2 := CreateOutputProgressPage('Installing', '{#ProgressInfo2}');
  
end;


function checkLogInfo(key: String): Boolean;
var
  fileName,tempStr,keyStr:String;
  nLines,i,postIndex:Integer;
  svArray: TArrayOfString;
begin
  fileName :=ExpandConstant('{app}\logs\advLog.txt');
  keyStr := ExpandConstant(key);
  //fileName :=ExpandConstant(logfile);
  LoadStringsFromFile(fileName, svArray);
  nLines := GetArrayLength(svArray);//读取文件
  
  for i := 0 to nLines-1 do
  begin
    tempStr := svArray[nLines-1-i];
    postIndex := Pos(keyStr,tempStr);
    Log(tempStr+'   ,'+keyStr);
    log('postIndex is'+IntToStr(postIndex));
    if (0 < postIndex) then//查找目标行
    begin
      result := True;
      break;
    end
    else
      result := False; 
  end;
end;

function getLogInfo(key: String): String;
var
  fileName,tempStr,lastInfo:String;
  nLines,i,lenStr,postIndex:Integer;
  svArray: TArrayOfString;
begin
  result := 'NoData'
  fileName :=ExpandConstant('{app}\logs\advLog.txt');
  //MsgBox('Modify: '+fileName, mbInformation, MB_OK)
  LoadStringsFromFile(fileName, svArray);
  nLines := GetArrayLength(svArray);//读取文件 
  for i := 0 to nLines - 1 do
  begin
    tempStr := svArray[nLines-1-i];
    lenStr := Length(tempStr);
    postIndex := Pos(key,tempStr);
    Log(tempStr+'   ,'+key);
    log('postIndex is'+IntToStr(postIndex));
    if (0 < postIndex) then//查找目标行
    begin
      result :=copy(tempStr,postIndex,lenStr-postIndex+1);
      break;
    end;   
  end;
  
end;

procedure CurStepChanged(CurStep: TSetupStep);
var
    Position, Max, Flag: Integer;
    ResultCode, ErrorCode: Integer;
    isVerySilent: boolean;
    j:Cardinal;
    parameter,cmdStr,msg,msgTemp,msgConfirm: String;
begin
  if CurStep = ssPostInstall then //File完了执行
  begin    
    try
      Flag :=0;
      Max := 25;
      for Position := 0 to Max do 
      begin
        OutputProgressWizardPage1.SetProgress(Position, Max); 
        if Position = 0 then
            OutputProgressWizardPage1.Show;
        if Position <20 then
        begin
            OutputProgressWizardPage1.SetText('Status:', 'Configuring 1...'); 
            if Position =5 then
            begin
                if Exec(ExpandConstant('{app}\autoGetDiskInfo.exe'), '', '', SW_HIDE, ewWaitUntilTerminated, ResultCode) then
                //if Exec(ExpandConstant('{app}\test1.bat'), '', '', SW_HIDE, ewWaitUntilTerminated, ResultCode) then
                begin
                    Sleep(2000);
                    //MsgBox('autoGetDiskInfo has run over.', mbInformation, MB_OK);
                    parameter := ExpandConstant('{app}\logs\getDiskInfoResult.txt')
                    if (FileExists(parameter)) then
                      Flag :=1
                    else
                      Flag :=2; 
                end;
            end;
        end;
        Sleep(2000 div Max);
      end;
      if Flag = 2 then
        if checkLogInfo('No EFI volume') then
        begin
          Flag :=20;
          msg := ExpandConstant('Warning('+IntToStr(Flag)+'): No EFI Volume, please confirm.');
          MsgBox(msg, mbInformation, MB_OK);
        end else 
        begin
          Flag := 21;
          msg := ExpandConstant('Error('+IntToStr(Flag)+'): Abnormal , please check the log to confirm the specific reason.');
          MsgBox(msg, mbInformation, MB_OK);
        end;


      if Flag = 1 then
      begin
        if not checkLogInfo('[END.1]Get disk information successfully') then  //检查log是否真正完成
        begin   
          Flag := 11;
          msg := ExpandConstant('Error('+IntToStr(Flag)+'): Abnormal , please check the log to confirm the specific reason.');
          MsgBox(msg, mbInformation, MB_OK);
        end else begin
          msgTemp :=getLogInfo('[Information]')
          //MsgBox(msgTemp, mbInformation, MB_OK);
          if msgTemp <> 'NoData' then
            msgConfirm := ExpandConstant(msgTemp+' Do you want to continue?')
          else           
            msgConfirm := ExpandConstant('[Information] We will start to config advclone, do you want to continue?');

          if SuppressibleMsgBox(msgConfirm, mbConfirmation, MB_YESNO, IDNO) = IDYES then
              Flag :=10
          else
              //MsgBox('你选择了no.', mbInformation, MB_OK);
              Flag :=3; 
        end;
      end;
    finally
      OutputProgressWizardPage1.Hide;
    end;

    //Flag==10,表示获取diskinformation正确无误，可以继续往下执行
    if Flag = 10 then
    begin
      try
        Max := 25;
        for Position := 0 to Max do begin
          OutputProgressWizardPage2.SetProgress(Position, Max); 
          if Position = 0 then
              OutputProgressWizardPage2.Show;
          if Position <20 then
          begin
              OutputProgressWizardPage1.SetText('Status:', 'Configuring 2...'); 
              if Position =10 then
              begin
                  if Exec(ExpandConstant('{app}\autoRun.exe'), '', '', SW_HIDE, ewWaitUntilTerminated, ResultCode) then
                  //if Exec(ExpandConstant('{app}\test2.bat'), '', '', SW_HIDE, ewWaitUntilTerminated, ResultCode) then
                  begin
                    //MsgBox('autoRUN has run over 002.', mbInformation, MB_OK); 
                    //解析log，判断是否完全成功，若完全成功则提示重启，若不完全成功，判断具体步骤提示
                    if checkLogInfo('[END.2]: Finish completely') then  //检查log是否真正完成
                    begin
                      Flag := 100;
                    end else
                    begin
                      Flag := 101;
                    end;
                
                  end;
              end;
            end;
          Sleep(2000 div Max);
        end;
      if Flag = 100 then
      begin
        MsgBox('Please reboot the system, you can chose backup or restore after system boot. Enter Windows 10 by default, press F9 to start backup, press F10 to start restore.', mbInformation, MB_OK);
      end else begin
        msg := ExpandConstant('Error('+IntToStr(Flag)+'): Some error ,please check the log to confirm the specific reason.');
        MsgBox(msg, mbInformation, MB_OK);
      end;
      finally
        OutputProgressWizardPage2.Hide;
      end;
    end;
  end;
end;
procedure CurUninstallStepChanged(CurUninstallStep: TUninstallStep);
var
  parameter: string;
  ResultCode: integer;
begin
  if CurUninstallStep = usDone then
  begin
    //删除 {app} 文件夹及其中所有文件
    Log('[Debug]删除安装目录');
    DelTree(ExpandConstant('{app}'), True, True, True);
  end;
end;
function ShouldSkipPage(PageID: Integer): Boolean;   
begin   
if PageID=wpPreparing then   
  result := true;   
if PageID=wpSelectProgramGroup then
  result := true;
if PageID=wpSelectTasks then
  result := true;
end;

